--------------------
---- SpringBoot ----
--------------------

基础篇
（一）快速上手SpringBoot
    1.Spring简介
        SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程；
        Spring程序缺点：
            依赖设置繁琐；
            配置繁琐；
        SpringBoot程序优点：
            起步依赖（简化依赖配置）；
            自动配置（简化常用工程相关配置）；
            负责功能（内置服务器）；
    2.SpringBoot入门程序：
        1.创建新模块，选择Spring Initializr，并配置模块相关基础信息；
        2.选择当前模块需要使用的技术集；
        3.开发控制器类；
        最简单SpringBoot程序所包含的基础文件：
            pom.xml
            Application类
        创建SpringBoot工程的四种方式：
            基于Idea创建SpringBoot工程；
            基于官网创建SpringBoot工程；
            基于阿里云创建SpringBoot工程；
            手工创建Maven工程修改为SpringBoot；
        入门案例解析
            starter：SpringBoot中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的；
            parent：
                所有SpringBoot项目都要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少冲突的目的；
                Spring-boot-starter-parent各版本间存在这诸多坐标版本不同；
            实际开发：
                使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供，除非SpringBoot未提供对应版本V；
                如发生坐标错误，在指定Version；
            启动方式：
                SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目（未启动Web服务器）；
                SpringBoot工程运行后初始化Spring容器，扫描引导类所在包加载bean；
        小结
            1.开发SpringBoot程序要继承spring-boot-starter-parent;
            2.spring-boot-starter-parent中定义了若干个依赖管理；
            3.继承parent模块可以避免多个依赖使用相同技术时出现依赖版本冲突；
            4.继承parent的形式页可以采用引入依赖的形式实现效果；
            5.开发SpringBoot程序需要导入坐标是通常引入对于的starter;
            6.每个不用的starter根据功能不同，通常包含多个依赖坐标；
            7.使用starter可以实现快速配置的效果，达到简化配置的目的；
    3.REST风格
        REST（Representational State Transfer），表现形式状态转换；
        @RequestBody、@RequestParm、@PathVariable
            区别：
                @RequestParm用于接收url地址传参或表格传参；
                @RequestBody用于接收json数据；
                @PathVariable用于接收路径参数，使用{参数名称}描述路径数据；
            应用：
                后期开发中，发送请求参数超过1个时，@RequestBody应用较广；
                如果发送非json格式数据，选用@RequestBody接收请求参数；
                采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值；
        @RestController
            类型：类注解
            位置：基于SpringMVC的RESTful开发控制器类定义上方；
            作用：设置当前控制器类为RESTful风格，等同于@Controller与@ResponseBody两个注解组合功能；
        @GetMapping、@PostMapping、@PutMapping、@DeleteMapping
            类型：方法注解
            位置：基于SpringMVC的RESTful开发控制器方法定义上方；
            作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如@GetMapping对应GET请求；
（二）SpringBoot基础配置
    1.属性配置
        SpringBoot默认配置文件application.properties，通过键值对配置对应属性；
        SpringBoot内置属性查询：广泛文档中参考第一向：Application properties，通过键值对配置对应属性；
        SpringBoot中导入对应starter后，提供对应配置属性；
    2.配置文件分类
        properties（传统格式/默认格式）
        yml（主流格式）
        yaml数据读取
        不同配置文件中相同配置按照加载优先级相互覆盖，不通配置文件中不通配置全部保留；
    3.yaml文件
        yaml数据读取
            使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名}
            小结：
                1.如果数据存在多层级，依次书写层级名称即可；
                2.在配置文件中可以使用${属性名}方式引用属性值；
                3.如果书写中出现特殊字符，可以使用双引号包裹起来作为字符解析；
                4.使用Environment对象封装全部配置信息，使用@Autowired自动装配数据到Environment对象中；
                5.使用@ConfigurationProperties注解绑定配置信息到封装类中，封装类需要定义为Spring管理的Bean，否则无法进行属性注入；
（三）基于SpringBoot实现SSM整合
    1.整合第三方技术
        整合JUnit
        整合MyBatis
        整合MyBatis-Plus
        整合Druid
应用篇
原理篇