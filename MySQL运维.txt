---------------
---MySQL运维---
---------------
（一）日志
    1.错误日志
        错误日志是MySQL中最重要的日志之一，它记录了当mysqld启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，建议首先查看此日志；
    2.二进制日志
        二进制日志记录了所有的DDL语句和DML语句，但不包括数据查询语句；
        作用：灾难时的数据恢复；MySQL的主从复制；
    3.查询日志
        查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句；
    4.慢查询日志
        慢查询日志记录了所有执行事件超过参数long_query_time设置值并且扫描记录数不小于min_examined_row_limit的所有的SQL语句的日志；
（二）主从复制
    1.概述
        主从复制是指将主数据库的DDL和DML操作通过二进制日志传到从库服务器中，然后再从库上对这些日志重新执行，从而使得从库和主库的数据保持同步；
        MySQL支持一台主库同时向多台从库进行复制，从库同时可以作为其他从服务器的主库，实现链状复制；
        MySQL复制的优点：
            主库出现问题，可以快速切换到从库提供服务；
            实现读写分离，降低主库的访问压力；
            可以再从库中执行备份，以避免备份期间影响主库服务；
    2.原理
        Master主库在事务提交时，会把数据变更记录在二进制日志文件Binlog中；
        从库读取主库的二进制日志文件Binlog，写入到从库的中继日志Relay Log；
        slave重做中继日志中的事件，将改变反映字节的数据；
    3.搭建
        服务器准备
            准备号两台服务器之后，在上述的两台服务器中分别安装好MySQL，并完成基础的初始化准备工作；
        主库配置
            修改配置文件；
            重启MySQL服务器；
            登录mysql，创建远程连接的账号，并授予主从复制权限；
            通过指令，查看二进制日志坐标；
        从库配置
            修改配置文件；
            重启MySQL服务器；
            登录mysql，设置主库配置；
            开启同步操作；
            查看主从同步状态；
（三）分库分表
    1.介绍
        随着互联网及移动互联网的发展，应用系统的数据量也是成指数式增长，若采用但数据库进行数据存储，存在以下性能瓶颈：
            IO瓶颈：热点数据太多，数据库缓存不足，产生大量磁盘IO，效率较低，请求数据太多，带宽不够，网络IO瓶颈；
            CUP瓶颈：排序、分组、连接查询、聚合统计等SQL会耗费大量的CPU资源，请求数太多，CPU出现瓶颈；
        分库分表的中心思想都是将数据分散存储，使得单元数据库/表的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的；
        拆分策略
            垂直拆分：
                垂直分库：以表为依据，根据业务将不同表拆分到不同库中；
                    每个库的表结构都不一样；
                    每个库的数据也不一样；
                    所有库的并集是全量数据；
                垂直分表：以字段为依据，根据字段属性将不同字段拆分到不同表中；
                    每个库的表结构都不一样；
                    每个表的数据也不一样，一般通过一列关联；
                    所有表的并集是全量数据；
            水平拆分：
                水平分库：以字段为依据，按照一定策略，将一个库的数据拆分到多个库中；
                    每个库的表结构都一样；
                    每个库的数据都不一样；
                    所有库的并集是全量数据；
                水平分表：以字段为依据，按照一定策略，将一个表的数据拆分到多个表中；
                    每个表的表结构都一样；
                    每个表的数据都不一样；
                    所有表的并集是全量数据；
        实现技术
            shardingJDBC：基于AOP原理，在应用程序中对本地执行的SQL进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持java语言，性能较高；
            MyCat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者；
    2.Mycat概述
        下载：下载地址：http://dl.mycat.org.cn/
        安装：MyCat是采用java语言开发的开源数据库中间件，支持Windows和Linux运行环节，下面介绍MyCat的Linux中的环境搭建，需要在准备好的服务器中安装MySQL、JDK、MyCat；
    3.Mycat入门
    4.Mycat配置
        schema.xml:作为MyCat中最重要的配置文件之一，涵盖了MyCat的逻辑库、逻辑表、分片规则、分片节点及数据源的配置；
        rule.xml:其中定义所有拆分表的规则，在使用过程中可以灵活的使用分片算法，或者对同一个分片算法使用不同的参数，让它分片过程可配置化，主要包含两类标签：tableRule、Function；
        server.xml:包含了MyCat的系统配置信息，主要有两个重要的标签：system、user；
    5.Mycat分片
        分片规则
            范围：根据指定的字段及其配置的范围与数据节点的对应情况，来决定该数据属于哪一个分片；
            取模：根据指定的字段值与节点数量进行求模运算，根据结果来决定该数据属于哪一个分片；
            一致性hash；
            枚举：通过在配置文件中配置可能的枚举值，指定数据分布到不同数据节点上，本规则使用于按照省份、性别、状态拆分数据等业务；
            应用指定：运行阶段有应用自主决定路由到哪个分片，直接根据字符子串计算分片号；
            固定分片hash算法：该算法类似于十进制的求模运算，但是为二进制的操作；
                如果是求模，连续的值，分别分配到各个不同的分片，但是此算法会将连续的值可能分配到相同的分片，降低事务处理难度；
                可以均匀分配，也可以非均匀分配；
                分片字段必须为数字类型；
            字符串hash解析：截取字符串中的指定位置的字符串，进行hash算法，算出分片；
            日期分片；
            自然月：使用场景为按照月份来分片，每个自然月为一个分片；
    6.Mycat管理及监控
（四）读写分离