-----------------
---- SSM框架 ----
-----------------

一、Spring
（一）Spring简介
    Spring是分层的Java SE/EE应用full-stack轻量级开源框架，以Ioc（反转控制）和AOP（面向切面编程）为内核；
    提供了展现层SpringMVC和持久层Spring JDBCTemplate以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开源框架；
    2017年9月份发布了Spring的最新版本Spring5.0通用版；
    Spring的优势：
        1.方便解耦，简化开发；
            通过Spring提供的IoC容器，开源将对象间的依赖关系由Spring进行控制，避免编码所造成的过度耦合。
            用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用；
        2.AOP编程的优势；
            通过Spring的AOP功能，方便进行面向切面编程，许多不容易用传统OOP实现的功能可以通过AOP轻松实现；
        3.声明式事务的支持；
            通过声明式方式灵活的进行事务处理，提高开发效率和质量；
        4.方便程序的测试；
            可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作；
        5.方便集成各种优秀的框架
            Spring对各种优秀框架（Struts、Hibermate、Hessian、Quartz等）的支持；
        6.降低JavaEE API的使用难度
            Spring对JavaEE API（如JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低；
        7.Java源码是经典学习范例
            Spring的源代码设计精妙、结构清晰、匠心独用，处处体现这大师对Java设计模式灵活运用以及对Java技术的高深造诣。它的源代码无疑是Java技术的最佳实践的范例；
（二）Spring快速入门
    Spring程序的开发步骤：
        1.导入Spring开发的基本包坐标；
        2.编写Dao接口和实现类；
        3.创建Spring核心配置文件；
        4.在Spring配置文件中配置UserDaoImpl；
        5.使用Spring的API获得Bean实例；
（三）Spring配置文件
    Bean标签基本配置
        用于配置对象交由Spring来创建；
        默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功；
        基本属性：
            id：Bean实例在Spring容器中的唯一标识；
            class：Bean的全限定名称；
        Bean标签范围配置：
            singleton：默认值，单例的；
                Bean的实例化个数：1个
                Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例；
                Bean的生命周期：
                    对象创建：当应用加载，创建容器时，对象就被创建了；
                    对象运行：只要容器在，对象一直活着；
                    对象销毁：当应用卸载，销毁容器时，对象就被销毁了；
            prototype：多例的；
                Bean的实例化个数：多个
                Bean的实例化时机：当调用getBean()方法时实例化Bean；
                Bean的生命周期：
                    对象创建：当使用对象时，创建新的对象实例；
                    对象运行：只要对象在使用中，就一直活着；
                    对象销毁：当对象长时间不用时，被Java的垃圾回收器回收了；
            request：Web项目中，Spring创建一个Bean对象，将对象存入到request域中；
            session：Web项目中，Spring创建一个Bean对象，将对象存入到session域中；
            global session：Web项目中，应用在Portlet环境，如果没有Portlet环境那么globalSession相当于session；
        Bean生命周期配置：
            init-method：指定类中的初始化方法名称；
            destroy-method：指定类中销毁方法名称；
        Bean实例化三种方式：
            无参构造方法实例化；
            工厂静态方法实例化；
            工厂实例方法实例化；
        Bean的依赖注入：
            Bean的依赖注入分析：
                因为UserService和UserDao都在Spring容器中，而最终程序直接使用的是UserService，所以可以在Spring容器中，将UserDao设置到UserService内部；
            Bean的依赖注入概念：
                依赖注入是Spring框架核心IoC的具体实现；
                在编写程序时，通过控制反转，把对象的创建直接交给了Spring，但是代码中不可能出现没有依赖的情况；
                IoC解耦只是降低他们的依赖关系，但不会消除；例如业务层仍回调用持久层的方法；
                那么这种业务层和持久层的依赖关系，在使用Sping之后，就让Spring来维护了；
                简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取；
            Bean的依赖注入方式：
                set方法注入：
                    p命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下：
                        首先需要引入p命名空间：xmlns:p="http://www.springframework.org/schema/p"
                        其次需要修改注入方式：<bean id="userService" class="com.itheima.service.impl.UserServiceImpl" p:userDao-ref="userDao"/>
            Bean的依赖注入的数据类型：
                上面的操作都是注入的应用Bean，处理对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入；
                注入数据的三种数据类型：普通数据类型、引用数据类型、集合数据类型；
    引入其他配置文件（分模块开发）
        实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载：
            <import resource="applicationContext-xxx.xml" />
    Spring的重点配置：
        <bean>标签
            id属性：在容器中Bean实例的唯一标识，不允许重复；
            class属性：要实例化的Bean的全限定名；
            scope属性：Bean的作用范围，常用是Singleton（默认）和prototype；
            <property>标签：属性注入
                name属性：属性名称
                value属性：注入的普通属性值
                ref属性：注入的对象引用值
                <list>标签
                <map>标签
                <properties>标签
            <constructor-arg>标签
        <import>标签：导入其他的Spring的分文件
（四）Spring相关API
    ApplicationContext的实现类
        1.ClassPathXmlApplicationContext：它是从类的根路径下加载配置文件，推荐使用这种；
        2.FileSystemXmlApplicationContext：它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置；
        3.AnnotationConfigApplicationContext：当使用注解配置容器对象是，需要使用此类来创建Spring容器，它用来读取注解；
    getBean()方法使用
        public Object getBean(String name) throws BeansException {
            assertBeanFactoryActive();
            return getBeanFactory().getBean(name);
        }

        public <T> T getBean(Class<T> requiredType) throws BeansException {
            assertBeanFactoryActive();
            return getBeanFactory().getBean(requiredType);
        }
        其中，当参数的数据类型是字符串时，标识根据Bean的id从容器中获得Bean实例，返回的是Object，需要强转。
        当参数的数据类型是Class类型时，标识根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错；
    Spring的重点API
        ApplicationContext app = new ClassPathXmlApplicationContext("xml文件");
        app.getBean("id");
        app.getBean(Class);
（五）Spring配置数据源
    数据源（连接池）的作用
        数据源（连接池）是提高程序性能而出现的；
        实现实例化数据源，初始化部分连接资源；
        使用连接资源时从数据源中获取；
        使用完毕后将连接资源归还给数据源；
    常见的数据源（连接池）：DBCP、C3P0、BoneCP、Druid等；
    数据源的开发步骤
        1.导入数据源的坐标和数据库驱动坐标；
        2.创建数据源对象；
        3.设置数据源的基本连接数据；
        4.使用数据源获取连接资源和归还连接资源；
    Spring配置数据源
        可以用DataSource的创建权交由Spring容器去完成；
    抽取jdbc配置文件
        applicationContext.xml加载jdbc.properties配置文件获得连接信息；
        首先，需要引入context命名空间和约束路径：
            命名空间：xmlns:context="http://www.springframework.org/schema/context"
            约束路径：http://www.springframework.org/schema/context
                     http://www.springframework.org/schema/context/spring-context.xsd
        <context:property-placeholder location="classpath:jdbc.properties">
        <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
            <property name="driverClass" value="${jdbc.driver}"/>
            <property name="jdbcUrl" value="${jdbc.url}"/>
            <property name="user" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
        </bean>
    Spring容器加载properties文件
        <context:property-placeholder location="xx.properties"/>
        <property name="" value="${key}"/>
（六）Spring注解开发
    Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率；
    Spring原始注解
        Spring原址注解主要是替代<Bean>的配置
        @Component:使用在类上用于实例化Bean
        @Controller:使用在web层类上用于实例化Bean
        @service:使用在service层类上用于实例化Bean
        @Repository:使用在dao层类上用于实例化Bean
        @Autowired:使用在字段上用于根据类型依赖注入
        @Qualifier:结合@Autowired一起使用用于根据名称进行依赖注入
        @Resource:相当于@Autowired+@Qualifier，按照名称进行注入
        @Value:注入普通属性
        @Scope:标准Bean的作用范围
        @PostConstruct:使用在方法上标注该方法时Bean的初始化方法
        @PreDestroy:使用在方法上标注该方法时Bean的销毁方法
    Spring新注解
        @Configuration:用于指定当前类时一个Spring配置类，当创建容器时会从该类上加载注解；
        @ComponentScan:用于指定Spring在初始化容器时要扫描的包；
        @Bean:使用在方法上，标注将该方法上，标注将该方法的返回值存储到Spring容器中；
        @PropertySource:用于加载.properties文件中的配置；
        @Import:用于导入其他配置类；
（七）Spring整合Junit
        在测试类中，每个测试方法都有加载Spring配置文件和获取Bean的两行代码；
        这两行代码的作用是获取容器，如果不写的话，会直接提示空指针异常，所以又不能轻易删掉；
        让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它；
        将需要进行测试的Bean直接在测试类中进行注入；
        Spring集成Junit步骤
            1.导入spring集成Junit的坐标；
            2.使用@Runwith注解替代原来的运行期；
            3.使用@ContextConfiguration指定配置文件或配置类；
            4.使用@Autowired注入需要测试的对象；
            5.创建测试方法进行测试；
（八）Spring与Web环境集成
    在Web项目中，可以使用ServletContextLinstener监听Web应用的启动，我们可以在Web应用启动时就加载Spring的配置文件，创建应用上下文对象ApplicationContext，再将其存储到最大的域servletContext域中，这样就可以在任意位置从域中获得应用上下文ApplicationContext对象；
    Spring集成Web环境步骤
        1.配置ContextLoaderListener监听器
        2.使用WebApplicationContext获得应用上下文 
（九）AOP
    Spring的AOP简介
        AOP为Aspect Oriented Programming的缩写，即面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术；
        AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。
        利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，通过提高了开发的效率；
        AOP的作用及其优势
            作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强；
            优势：减少重复代码，提高开发效率，并且便于维护；
        AOP的底层实现
            实际上，AOP的底层是通过Spring提供的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，再去调用目标对象的方法，从而完成功能的增强。
        AOP的动态代理技术
            常用的动态代理技术
                JDK代理：基于接口的动态代理技术；
                cglib代理：基于父类的动态代理技术；
        AOP相关概念
            Spring的AOP实现底层就是在上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强；
            Target（目标对象）：代理的目标对象；
            Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类；
            Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在Spring中这些点指的是方法，因为Spring只支持方法类型的连接点；
            Pointcut（切入点）：所谓切入点是指我们要对哪些Joinpoint进行拦截的定义；
            Advice（通知/增强）：所谓通知是指拦截到的Joinpoint之后所要做的事情就是通知；
            Aspect（切面）：是切入点和通知的结合；
            Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。Spring采用动态代理织入，而AspectJ采用编译器织入和类装载期织入；
        AOP开发明确的事项
            需要编写的内容
                编写核心业务代码（目标类的目标方法）；
                编写切面类，切面类中有通知（增强功能的方法）；
                在配置文件中，配置织入关系，，即将哪些通知与哪些连接点进行结合；
            AOP技术实现的内容
                Spring框架监控切入点方法的执行，一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行；
            AOP底层使用哪种代理方式
                在Spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式；
        知识要点
            aop：面向切面编程；
            aop底层实现：基于JDK的动态代理和基于Cglib的动态代理；
            aop的重点概念：
                Pointcut（切入点）：被增强的方法；
                Advice（通知/增强）：封装增强业务逻辑的方法；
                Aspect（切面）：切点+通知；
                Weaving（织入）：将切点与通知结合的过程；
            开发明确事项：
                谁是切点（切点表达式配置）；
                谁是通知（切面类中的增强方法）；
                将切点和通知进行织入配置；
    基于XML的AOP开发
        切点表达式的写法
            表达式语法：execution([修饰符] 返回值类型 包名.类名.方法名(参数))
            访问修饰符可以省略；
            返回值类型、包名、类名、方法名可以使用*代表任意；
            包名和类名之间的一个点.代表当前包下的类，两个点..标识当前包及其子包下的类；
            参数列表可以使用两个点..表示任意个数，任意类型的参数列表；
        通知类型
            通知的配置语法：<aop:通知类型 method="切面类中方法名" pointcut="切点表达式"/>
            前置通知：<aop:before>//用于配置前置通知。指定增强的方法在切入点方法之前执行；
            后置通知：<aop:after-returning>//用于配置后置通知。指定增强的方法在切入点方法之后执行；
            环绕通知：<aop:around>//用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行；
            异常抛出通知：<aop:throwing>//用于配置异常抛出通知。指定增强的方法在出现异常时执行；
            最终通知：<aop:after>//用于配置最终通知。无论增强方式执行是否有异常都会执行；
        切点表达式的抽取
            当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用pointcut-ref属性代替pointcut属性来引用抽取后的切点表达式；
        知识要点
            aop织入的配置
                <aop:config>
                    <aop:aspect ref="切面类">
                        <aop:before method="通知方法名称" pointcut="切点表达式"></aop:before>
                    </aop:aspect>
                </aop:config>
            通知的类型:前置通知、后置通知、环绕通知、异常抛出通知、最终通知；
            切点表达式的写法：execution([修饰符 返回值类型 包名.类名.方法名(参数)])
    基于注解的AOP开发
        快速入门
            1.创建目标接口和目标类（内部有切点）；
            2.创建切面类（内部有增强方法）；
            3.将目标类和切面类的对象创建权交给Spring；
            4.在切面类中使用注解配置织入关系；
            5.在配置文件中开启组件扫描和AOP的自动代理；
            6.测试；
        注解通知的类型
            前置通知：@Before//用于配置前置通知。指定增强的方法在切入点方法之前执行；
            后置通知：@AfterReturning//用于配置后置通知。指定增强的方法在切入点方法之后执行；
            环绕通知：@Around//用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行；
            异常抛出通知：@AfterThrowing//用于配置异常抛出通知。指定增强的方法在出现异常时执行；
            最终通知：@After//用于配置最终通知。无论增强方式执行是否有异常都会执行；
        切点表达式的抽取
            同xml配置aop一样，可以将切点表达式抽取，抽取方式是在切面内定义方法，在该方法上使用@Pointcut注解定义切点表达式，然后在增强注解中进行引用；
        知识要点
            注解aop开发步骤：
                1.使用@Aspect标注切面类；
                2.再使用@通知注解标注通知方法；
                3.再配置文件中配置aop自动代理<aop:aspectj-autoproxy />
            通知注解类型
（十）Spring的事务控制
    编程式事务控制相关对象
        PlatformTransactionManager
            PlatformTransactionManager接口是spring的事务管理器，它里面提供了我们常用的操作事务的方法；
            TransactionStatus getTransaction(TransactionDefination defination);//获取事务的状态信息
            void commit(TransactionStatus status);//提交事务
            void rollback(TransactionStatus status);//回滚事务
            PlatformTransactionManager是接口类型，不同的Dao层技术则有不同的实现类。
        TransactionDefinition
            TransactionDefinition是事务的定义信息对象；
                int getIsolationLevel();//获得事务的隔离级别
                int getPropogationBehavior();//获得事务的传播行为
                int getTimeout();//获得超时时间
                boolean isReadOnly();//是否只读
            事务隔离级别
                设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和幻读；
                ISOLATION_DEFAULT
                ISOLATION_READ_UNCOMMITTED
                ISOLATION_READ_COMMITTED
                ISOLATION_REPEATABLE_READ
                ISOLATION_SERIALIZABLE
            事务传播行为
                REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务，加入到这个事务中。一般的选择；
                SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行；
                MANDATORY:使用当前的事务，如果当前没有事务，就抛出异常；
                REQUIRES_NEW:新建事务，如果当前在事务中，把当前事务挂起；
                NOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起；
                NEVER:以非事务方式运行，如果当前存在事务，抛出异常；
                NESTED:如果当前存在事务，则嵌套事务内执行。如果当前没有事务，则执行required类似的操作；
                超时时间：默认值是-1，没有超时限制。如果有，以秒为单位进行设置；
                是否只读：建议查询时设置为只读；
            TransactionStatus
                TransactionStatus接口提供的是事务具体的运行状态；
                    boolean hasSavepoint();//是否存储回滚点；
                    boolean isCompleted();//事务是否完成
                    boolean isNewTransaction();//是否是新事务
                    boolean isRollbackOnly();//事务是否回滚
    基于XML的声明式事务控制
        Spring的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中声明，用在Spring配置文件中声明式的处理事务来代替代码式的处理事务；
        声明式事务处理的作用
            事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可；
            在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译，这样维护起来极其方便；
            Spring声明式事务控制底层就是AOP；
        切点方法的事务参数的配置
            <tx:advice id="txAdvice" transaction-manager="transactionManager">
                <tx:attributes>
                    <tx:method name="*" />
                </tx:attributes>
            </tx:advice>
            其中<tx:method>代表切点方法的事务参数的配置，属性：
                name：切点方法名称
                isolation：事务的隔离级别
                propogation：事务的传播行为
                timeout：超时时间
                read-only：是否只读
        知识要点
            声明式事务控制的配置要点：
                平台事务管理器配置；
                事务通知的配置；
                事务aop织入的配置；
    基于注解的声明式事务控制
        知识要点 
            注解声明式事务控制的配置要点：
                平台事务管理器配置(xml方式)
                事务通知的配置（@Transactional注解配置）
                事务注解驱动的配置<tx:annotation-driven>

二、SpringMVC
（一）SpringMVC的简介
    SpringMVC快速入门
        1.导入SpringMVC相关坐标；
        2.配置SpringMVC核心控制器DispathcerServlet；
        3.创建Controller类和视图页面；
        4.使用注解配置Controller类中业务方法的映射地址；
        5.配置SpringMVC核心文件spring-mvc.xml；
        6.客户端发起请求测试；
    SpringMVC概述
        SpringMVC是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级Web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中；
        SpringMVC已经成为目前最主流的MVC框架之一，并且随着Spring3.0的发布，全面超越Struts2，成为最优秀的MVC框架；
        SpringMVC通过一套注解，让一个简单的Java类成为处理请求的控制器，而无需实现任何接口，同时它还支持RESTful编程风格的请求；
（二）SpringMVC的组件解析
    SpringMVC的执行流程
        1.用户发送请求至前端控制器DispathcerServlet；
        2.DispathServlet收到请求调用HandlerMapping处理器映射器；
        3.处理器映射器找到具体的处理器，生成处理器对象及处理器拦截器一并返回给DispathcerServlet；
        4.DispathcerServlet调用HandlerAdapter处理器适配器；
        5.HandlerAdapter经过适配调用具体的处理器；
        6.Controller执行完成返回ModelAndView；
        7.HandlerAdapter将controller执行结果ModelAndView返回给DispathcerServlet；
        8.DispathcerServlet将ModelAndView传给ViewResolver视图解析器；
        9.ViewResolver解析后返回具体View；
        10.DispathcerServlet根据View进行渲染视图。DispathcerServlet响应用户；
    SpringMVC注解解析
        mvc命名空间引入
            命名空间：
                xmlns:context="http://www.springframework.org/schema/context"
                xmlns:mvc="http://www.springframework.org/schema/mvc"
            约束地址：
                http://www.springframework.org/schema/context
                http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/mvc
                http://www.springframework.org/schema/mvc/spring-mvc.xsd
        @RequestMapping
            作用：用于建立请求URL和处理请求方法之间的对应关系；
            位置：
                类上：请求URL的第一级访问目录，此处如果不写就相当于应用的根目录；
                方法上：请求URL的第二级目录，与类上使用@RequestMapping标注的一级目录一起组成访问虚拟路径；
            属性：
                value：用于指定请求的URL，它和path属性的作用是一样的；
                method：用于指定请求的方式；
                params：用于指定限制请求参数的条件；它支持简单的表达式；要求请求参数的key和value必须和配置的一模一样；
    SpringMVC的XML配置解析
        视图解析器
            SpringMVC有默认组件配置，默认组件都是DispathcerServlet。properties配置我呢见中配置的；
            该配置文件的地址org/springframework/web/servlet/DispathcerServlet.properties;
            该文件中配置了默认的视图解析器，如下：
                org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver
            翻看该解析器源码，可以看到该解析器的默认配置，如下：
                REDIRECT_url_PREFIX = "redirecr:" //重定向前缀
                FORWARD_URL_PREFIX = "forward:" //转发前缀（默认值）
                prefix = ""; //视图名称前缀
                suffix = ""; //视图名称后缀
    知识要点
        SpringMVC的相关组件
            前端控制器：DispatcherServlet
            处理器映射器：HandlerMapping
            处理器适配器：HandlerAdapter
            处理器：Handler
            视图解析器：ViewResolver
            视图：View
        SpringMVC的注释和配置
            请求映射注解：@RequestMapping
            视图解析器配置：
                REDIRECT_url_PREFIX = "redirecr:" //重定向前缀
                FORWARD_URL_PREFIX = "forward:" //转发前缀（默认值）
                prefix = ""; //视图名称前缀
                suffix = ""; //视图名称后缀
（三）SpringMVC的数据响应
    SpringMVC的数据响应方式
        页面跳转
            直接返回字符串
                直接返回字符串：此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转；
                返回带有前缀的字符串：
                    转发：forward:/WEB-INF/views/index.jsp
                    重定向：redirect:/index.jsp
            通过ModelAndView对象返回
        回写数据
            直接返回字符串
                将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回；
            返回对象或集合
                通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数，指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行配置；
                在方法上添加@ResponseBody就可以返回json格式的字符串，但这样配置比较麻烦，配置的代码比较多，因此可以使用mvc的注解驱动带起上述配置：<mvc:annotation-driven>
                在SpringMVC的各个组件中，处理器映射器、处理器适配器、视图解析器成为SpringMVC的三大组件。
                使用<mvc:annotation-driven>自动加载RequestMappingHandlerMapping（处理映射器）和RequestMappingHandlerAdapter（处理适配器），可用在Spring-mvc.xml配置文件中使用<mvc:annotation-driven>替代注解处理器和适配器的配置；
                同时使用<mvc:annotation-driven>默认底层就会集成jackson进行对象或集合的json格式字符串的转换；
（四）SpringMVC获得请求数据
    获得请求参数
        客户端请求参数的格式是：name=vlaue&name=value...
        服务器端需要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数：
            基本类型参数；
            POJO类型参数；
            数字类型参数；
            集合类型参数；
    请求数据乱码问题
        当post请求时，数据会出现乱码，可以设置一个过滤器来进行编码的过滤；
        <filter>
            <filter-name>CharacterEncodingFilter</filter-name>
            <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
            <init-param>
                <param-name>encoding</param-name>
                <param-value>UTF-8</param-value>
            </init-param>
        </filter>
        <filter-mapping>
            <filter-name>CharacterEncodingFilter</filter-name>
            <url-pattern>/*</url-pattern>
        </filter-mapping>
    参数绑定注解@requestParam
        当请求的参数名称与Contorller的业务方法参数名称不一致时，就需要通过@requestParam注解显示绑定；
        注解@requestParam还有如下参数可以使用：
            value：与请求参数名称；
            required：此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错；
            defaultValue：当没有指定请求参数时，则使用指定的默认值赋值；
    获取Restful风格的参数
        Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简介，更有层次，更易于实现缓存机制等；
        Restful风格的请求是使用"url+请求方式"标识依次请求目的的，HTTP协议里面的四个标识操作方式的动词如下：
            GET:用于获取资源
            POST:用于新建资源
            PUT:用于更新资源
            DDELETE:用于删除资源
        在SpringMVC中可以使用占位符进行参数绑定，地址/user/1可以写成/user/{id}，在业务方法中可以使用@PathVariable注解进行占位符的匹配获取；
    静态资源访问
        <mvc:resources mapping="/js/**" location="/js/"/>
        <mvc:default-servlet-handler/>
    自定义类型转换器
        SpringMVC默认已经提供了一些常用的类型转换机，例如客户端提交的字符串转换成int型进行参数设置；
        但不是所有的数据类型都提供了转换机，没有提供的就需要自定义转换器；
        自定义类型转换器的开发步骤：
            1.定义转换器实现Converter接口；
            在配置文件中声明转换器；
            在<annotation-driven>中引用转换器；
    获得Servlet相关API
        SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：
            HTTPServletRequest
            HTTPServletResponse
            HttpSession
    获得请求头
        @RequestHeader
            使用@RequestHeader可以获得请求头信息；
            @RequestHeader注解的属性如下：
                value：请求头的名称；
                required：是否必须携带此请求头；
    文件上传
        文件上传客户端三要素：
            1.表单项type="file"
            2.表单的提交方式是post
            3.表单的enctype属性是多部份表单形式，即enctype="multipart、form-data"
        文件上传原理
            当form表单修改为多部分表单时，request.getParameter()将失效；
            enctype="application/x-www-form-urlencoded"时，form表单的正文内容格式是key=value&key=value&key=value
            当form表单的enctype取值为Multipart、form-data是，请求正文内容就会变成多部份形式；
        单文件上传步骤
            1.导入fileupload和io坐标；
            2.配置文件上传解析器；
            3.编写文件上传代码；
（五）SpringMVC拦截器
    拦截器的作用
        SpringMVC的拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理；
        将拦截器按一定的顺序联结成一条链，这条链称为拦截器链。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的具体实现。
    拦截器和过滤器的区别
        过滤器：
            使用范围：是servlet规范中的一部分，任何Java Web工程都可以使用；
            拦截范围：在url-pattern中配置了/*后，可以对所有要访问的资源拦截；
        拦截器：
            使用范围：是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用；
            拦截范围：在<mvc:mapping path="" />中配置了/**后，也可以对所有资源进行拦截，但是可以通过<mvc:exclude-mapping path="">标签排除不需要拦截的资源；
    拦截器快速入门
        1.创建拦截器类实现HandlerInterceptor接口；
        2.配置拦截器；
        3.测试拦截器的拦截效果；
    拦截器方法说明
        preHandle():方法将在请求处理之前进行调用，该方法的返回值是布尔值，当范围false标识请求结束，后续的Interceptor和Controller都不会再执行；当范围值为true时就会继续调用下一个Interceptor的preHandle方法；
        postHandle():该方法时在当前请求进行处理之后被调用，前提是preHandle方法的返回值为true，且它会在DispatcherServlet进行视图返回渲染之前被调用，可以在此方法中对Controller处理之后的ModelAndView对象进行操作；
        afterCompletion():该方法将在整个请求结束之后，即DispacherServlet渲染了对应的视图之后执行，前提是preHandle方法的返回值为true时才能被调用；
（六）SpringMVC异常处理
    系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试等手段减少运行时异常的发生；
    系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理；
    简单异常处理器SimpleMappingExceptionResolver
        SpringMVC已经定义好了该类型转换器，在使用时可以根据项目情况进行相应异常与视图的映射配置；
    自定义异常处理步骤
        1.创建异常处理器类实现HandlerExceptionResolver；
        2.配置异常处理器；
        3.编写异常页面；
        4.测试异常跳转；
    知识要点
        异常处理方式
            配置简单异常处理器SimpleMappingExceptionResolver；
            自定义异常处理器；
        自定义异常处理步骤 
            1.创建异常处理器类实现HandlerExceptionResolver；
            2.配置异常处理器；
            3.编写异常页面；
            4.测试异常跳转；

三、Spring JdbcTemplate
    JdbcTemplate开发步骤
        1.导入spring-jdbc和spring-tx坐标；
        2.创建数据库表和实体；
        3.创建JdbcTemplate对象；
        4.执行数据库操作；
    JdbcTemplate概述
        它是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装，spring框架为我们提供了很多的操作模板类；
    Spring产生JdbcTemplate对象
        我们可以将JdbcTemplate的创建权交给Spring，将数据源DataSource的创建权也交给Spring，在Spring容器内部将数据源DataSource注入到JdbcTemplate模板对象中；
    知识要点    
        1.导入spring-jdbc和spring-tx坐标；
        2.创建数据库表和实体；
        3.创建JdbcTemplate对象；
            JdbcTemplate jdbcTemplate = new JdbcTemplate();
            jdbcTemplate.setDataSource(dataSource);
        4.执行数据库操作；
            更新操作：
                jdbcTemplate.update(sql, params);
            查询操作：
                jdbcTemplate.query(sq;, Mapper, params);
                jdbcTemplate.queryForObject(sql, Mapper, params);   

四、MyBatis
（一）MyBatis的简介
    原始jdbc操作的分析
        原始jdbc开发存在的问题如下：
            1.数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能；
            2.sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码；
            3.查询操作时，需要手动将结果集中的数据手动封装到实体中，插入操作时，需要手动将实体的数据设置到sql语句的占位符位置；
        应对上述问题给出的解决方案：
            1.使用数据库连接池初始化连接资源；
            2.将sql语句抽取到xml配置文件中；
            3.使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射；
    什么是MyBatis
        MyBatis是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动。创建连接、创建statement等繁杂的过程；
        MyBatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句；
        最后MyBatis思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节，使我们不用与jdbc api打交道，即可以完成对数据库的持久化操作；
（二）MyBatis的快速入门
    MyBatis开发步骤：
        1.添加MyBatis的坐标；
        2.创建user数据表；
        3.编写User实体类；
        4.编写映射文件UserMapper.xml
        5.编写核心文件SqlMapConfig.xml
        6.编写测试类；
（三）MyBatis的映射文件概述
（四）MyBatis的增删改查操作
    Mybatis的插入数据操作
        插入语句使用insert标签；
        在映射文件中使用parameterType属性指定要插入的数据类型；
        Sql语句中使用#{实体属性名}方式引用实体中的属性值；
        插入操作使用的API是sqlSession.insert("命名空间.id", 实体对象)；
        插入操作涉及数据库数据变化，所以要使用sqlSession对象显式的提交事务，即sqlSession.commit();
    MyBatis的修改操作
        修改语句使用update标签；
        修改操作使用的API是sqlSession.update("命名空间.id", 实体对象)；
    MyBatis的删除操作
        删除语句使用delete标签；
        Sql语句中使用#{任意字符串}方式引用传递的单个参数；
        删除操作使用的API是sqlSession.delete("命名空间.id", Object)；
（五）MyBatis的核心配置文件概述
    MyBatis核心配置文件层级关系
        configuration配置
            properties属性；
            settings设置；
            typeAliases类型别名；
            typeHandlers类型处理器；
            objectFactory对象工厂；
            plugins插件；
            environments环境：default="development"//指定默认的环境名称
                environment环境变量：id="development"//指定当前环境的名称
                    transactionManager事务管理器：type="JDBC"//指定事务管理类型是JDBC
                    dataSource数据源：type="POOLED"//指定当前数据源类型是连接池
            databaseIdProvider数据库厂商标识；
            mappers映射器；
    MyBatis常用配置解析
        environments标签
            其中，事务管理器类型有两种：
                JDBC：这个配置就是直接使用了JDBC的提交和回滚设置，它依赖于从数据源得到的连接来管理事务的作用域；
                MANAGED：这个配置几乎没有做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期。默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将closeConnection属性设置为false来阻止它默认的关闭行为；
            其中，数据源类型有三种：
                UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接；
                POOLED：这种数据源的实现利用“池”的概念将JDBC连接对象组织起来；
                JNDI：这个数据源的实现是为了能在如EJB或应用服务器的这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个JNDI上下文的引用；
        mapper标签
            该标签的作用是加载映射的，加载方式有如下几种：
                使用相对于类路径的资源引用，例如：<mapper resource="org/mybatis/AuthorMapper.xml" />
                使用完全限定资源定位符，例如：<mapper url="file:///var/mappers/AuthorMapper.xml" />
                使用映射器接口实现类的完全限定类名，例如<mapper class="org.mybatis.builder.AuthorMapper" />
                将包内的映射器接口实现全部注册为映射器，例如<package name="org.mybatis.builder" />
        properties标签
            实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件；
        typeAliases标签
            类型别名是为Java类型设置一个短的名字；
（六）MyBatis的相应API
    SqlSession工厂构建器SqlSessionFactoryBuilder
        常用API：SqlSessionFactory build(InputStream inputStream);
        通过加载mybatis的核心文件输入流的形式构建一个SqlSessionFactory对象；
        其中，Resources工具类，这个类在org.apache.ibatis.io包中.Resources类帮助我们从类路径下、文件系统或一个webURL中加载资源文件；
    SqlSession工厂对象SqlSessionFactory
        SqlSessionFactory有多个方法创建SqlSession实例：
            openSession();//会默认开启一个事务，单事务不会自动提交，也就意味着需要手动提交该事务，更新操作数据才会持久化到数据库中；
            openSession(boolean autoCommit);//参数有为是否自动提交，如果设置为true，那么不需要手动提交事务；
    SqlSession会话对象
        SqlSession实例在MyBatis中是非常强大的一个类。在这里有所有执行语句、提交或回滚事务和获取映射器实例的方法；
（七）MyBatis的Dao层实现
    代理开发方式
        采用MyBatis的代理开发方式实现Dao层的开发，这种方式是主流方式；
        Mapper接口开发方法只需要程序与编写Mapper接口，由MyBatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。
        Mapper接口开发需要准许以下规范：
            Mapper.xml文件中的namespace于mapper接口的全限定名相同；
            Mapper接口方法名和Mapper.xml中定义的每个statement的id相同；
            Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同；
            Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同；
    MtBatis的Dao层实现的两种方式
        手动对Dao进行实现：传统的开发方式；
        代理方式对Dao层进行实现；
（八）MyBatis映射文件深入
        动态sql语句概述
            MyBatis的映射文件中，有些时候业务逻辑复杂时，SQL是动态变化的，此时简单SQL就不能满足要求；
        MyBatis映射文件配置
            <select>:查询
            <insert>:插入
            <update>:修改
            <delete>:删除
            <where>:where条件
            <if>:if判断
            <foreach>:循环
            <sql>:sql片段抽取
        typeHandlers标签
            无论是MyBatis在预处理语句中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java类型；
            可以重写类型处理器或创建自定义类型处理器来处理不支持的或非标准的类型。
            具体做法为：实现org.apache.ibatis.type.TypeHandler接口，或基础一个很便利的类org.apache.ibatis.type.BaseTypeHandler，然后可以选择性地将它映射到一个JDBC类型；
            开发步骤：
                1.定义转换类继承类BaseTypeHandler<T>;
                2.覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法，getNullableResult为查询时mysql的字符串类型转换成java的Type类型的方法；
                3.在MyBatis核心配置文件中进行注册；
                4.测试转换是否正确；
        plugins标签
            MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据；
            开发步骤：
                1.导入通用PageHelper的坐标；
                2.在MyBatis核心配置文件中配置PageHelper插件；
                3.测试分页数据获取；
（九）MyBatis的多表查询
    MyBatis多表配置方式：
        一对一配置：使用<resultMap>做配置；
        一对多配置：使用<resultMap>+<collection>做配置；
        多对多配置：使用<resultMap>+<collection>做配置；
（十）MyBatis的注解开发
    MyBatis的常用注解
        @insert:实现新增
        @Update:实现更新
        @Delete:实现删除
        @Select:实现查询
        @Result:实现结果集封装
        @Results:可以与@Result一起使用，封装多个结果集
        @One:实现一对一结果集封装
        @Many:实现一对多结果集封装
    MyBatis的注解实现复杂映射开发
        实现复杂关系映射之前我们可以在映射文件中通过配置<resultMap>来实现，使用注解开发后，我们可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置；
        @Results：代替的是标签<reusltMap>该注解中可以使用单个@Result注解，也可以使用@Result集合。
            使用格式：@Results({@Result(), @Result()})或@Results(@Result())
        @Result:代替了<id>标签和<result>标签；
            @Result中属性介绍：
                column：数据库的列名；
                property：需要装配的属性名；
                one：需要使用的@One注解(@Result(one = @One))
                many：需要使用的@Many注解(@Result(many = @Many))

