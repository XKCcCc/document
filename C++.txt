---------------
------C++------
---------------

一、C++基础入门
    （一）C++初识
        1.第一个C++程序
        2.注释
        3.变量
        4.常量
            #define/const
        5.关键字
        6.标识符命名规则
    （二）数据类型
        1.整形
        2.sizeof关键字
            sizeof(数据类型/变量) 统计数据类型/变量占用内存大小
        3.实型（浮点型）
        4.字符型
        5.转义字符
            \n 换行符
            \\ 反斜杠\
            \t 水平制表符
        6.字符串型
            C风格字符串： char 变量名[] = "字符串值"
            C++风格字符串： string 变量名 = "字符串值"
        7.布尔类型bool
        8.数据的输入
            cin >> 变量名
    （三）运算符
        1.算术运算符
        2.赋值运算符
        3.比较运算符
        4.逻辑运算符
    （四）程序流程结构
        1.选择结构
        2.循环结构
        3.跳转语句
            goto 无条件跳转
    （五）数组
        1.一维数组
        2.二维数组
    （六）函数
        1.概述
        2.函数的定义
        3.函数的调用
        4.值传递
        5.函数的常见样式
        6.函数的声明
        7.函数的分文件编写
    （七）指针
        1.指针的基本概念
        2.指针变量的定义和使用
            2.1指针定义的语法： 数据类型 * 指针变量名
            2.2使用指针： 指针前加*代表解引用，找到指针指向内存中的数据
        3.指针所占内存空间
        4.空指针和野指针
            4.1空指针指向0，不可访问
            4.2野指针指向非法空间，不可访问
        5.const修饰指针
            5.1const修饰指针-常量指针：指针指向可以修改，但指针指向的值不可以修改
            5.2const修饰常量-指针常量：指针的指向不可以改，但指针指向的值可以改
            5.3const既修饰指针，又修饰常量：指针的指向和指针指向的值都不可以修改
        6.指针和数组
        7.指针和函数
        8.指针、数组、函数
    （八）结构体
        1.结构体基本概念
        2.结构体定义和使用
        3.结构体数组
        4.结构体指针
        5.结构体嵌套结构体
        6.结构体做函数参数
        7.结构体中的const使用场景
        8.结构体案例
二、C++核心编程
    （一）内存分区模型
        1.程序运行前：代码区、全局区
        2.程序运行后：代码区、全局区、栈区、堆区
        3.new操作符
            new 类型(data)
            delete 地址
            delete [] 数组名
    （二）引用
        1.引用的基本使用
            作用：给变量起别名
            基本语法：数据类型 &别名 = 原名
        2.引用注意事项
            引用必须初始化
            引用在初始化后，不可以改变
        3.引用做函数参数
            引用传递，形参会修饰实参
        4.引用做函数返回值
            不要返回局部变量的引用
            函数的调用可以作为左值存在
        5.引用的本质
            引用的本质在C++内部实现是一个指针常量
        6.常量引用
    （三）函数提高
        1.函数默认参数
            如果函数声明有默认参数，函数实现时就不能有默认参数，函数和声明和实现只能有一个有默认参数
        2.函数占位参数
        3.函数重载
            作用：可以让函数名相同，提高复用性
            条件：同一作用域下
                 函数名称相同
                 函数参数类型不同，或者个数不同，或者顺序不同
    （四）类和对象
        1.封装
            C++面向对象的三大特性：封装、继承、多态
            封装的意义：将属性和行为作为一个整体，表现生活中的事物；
                       将属性和行为加以权限控制
                            public 公共权限    成员 类内可以访问 类外可以访问
                            protected 保护权限 成员 类内可以访问 类外不可以访问 儿子可以访问父亲中的保护内容
                            private 私有权限   成员 类内可以访问 类外不可以访问 儿子不可以访问父亲的私有内容
            struct和class的区别
                struct默认权限为公共
                class默认权限为私有
            成员属性设置为私有的优点
                将所有成员属性设置为私有，可以之间控制读写权限
                对于写权限，我们可以检测数据的有效性
        2.对象的初始化和清理
            构造函数：主要作用在于创建对象是为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用
            析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作
            构造函数的语法：
                构造函数没有返回值
                函数名称与类名相同
                构造函数可以有参数，因此可以发生重载
                程序在调用对象的时候会自动调用构造，无需手动调用，而且指挥调用一次
            析构函数语法：
                析构函数没有返回值
                函数名称与类名相同，在名称前加上符号~
                析构函数不可以有参数，因此不可以发生重载
            2.1析构函数的分类及调用
                两种分类方式：
                    按参数分为：有参构造和无参构造
                    按类型分为：普通构造和拷贝构造
                三种调用方式：
                    括号法、显示法、隐式转换法
            2.2拷贝构造函数调用时机
                使用一个已经创建完毕的对象来初始化一个新对象
                值传递的方式给函数参数传值
                以值方式返回局部对象
            2.3浅拷贝和深拷贝
                浅拷贝：简单的赋值拷贝操作
                深拷贝：在堆区重新申请空间，进行拷贝操作
            2.4初始化列表
                Person(int a, int b, int c):m_A(a),m_B(b),m_C(c) {}
            2.5静态成员
                静态成员变量
                    所有对象都共享同一份数据
                    编译阶段就分配内存
                    类内声明，类外初始化
                静态成员哈桑农户
                    所有对象共享同一个函数
                    静态成员函数只能访问静态成员变量    
        3.C++对象模型和this指针
            3.1成员变量和成员函数分开存储
            3.2this指针概念：this指针指向被调用的成员函数所属的对象
            3.3const修饰成员函数
                常函数
                    成员函数后加const后我们称这个函数为常函数
                    常函数内不可以修改成员属性
                    成员属性声明时加关键字mutable后，在常函数中依然可以修改
                常对象
                    声明对象前加const称该对象为常对象
                    常对象只能调用常函数
        4.友元
            友元的目的是让一个函数或者类访问另一个类中的私有成员
            友元的关键字为friend
            友元的三种实现
                全局函数做友元
                    class Person{
                        friend void func();
                    }
                类做友元
                    class Person1{}
                    class Person2{
                        friend class Person1;
                    }
                成员函数做友元
                    class Person1{}
                    class Person2{
                        friend void Person1::func();
                    }
        5.运算符重载
            实现两个自定义数据类型相加的运算
        6.继承
            6.1继承的基本语法
                class 子类：继承方式 父类
                子类也称为派生类
                父类也称为基类
                class BasePage {}
                class Java : public BasePage {
                    public:
                        void content(){}
                }
            6.2继承方式：公共继承、保护继承、私有继承
            6.3多继承语法
                class 子类: 继承方式 父类1, 继承方式 父类2, ... {}
            6.4菱形继承
                解决方法：使用虚继承virtual
        7.多态
            多态分为两类：
                静态多态：函数重载、运算符重载属于静态
                动态多态：派生类和虚函数实现运行时多态
            静态多态和动态多态的区别：
                静态多态的函数地址早绑定：编译阶段确定函数地址
                动态多态的函数地址晚绑定：运行阶段确定函数地址
            6.1动态多态的条件:
                有继承关系
                子类重写父类虚函数（父类中的 virtual void func()）
            6.2动态多态使用
                父类的指针或引用 执行子类对象
            6.3纯虚函数
                virtual 返回值类型 函数名(参数列表) = 0;
                当类中有了纯虚函数，这个类也称为抽象类
                抽象类无法实例化对象，子类必须重写抽象类中的纯虚函数，否则也属于抽象类
            6.4虚析构函数和纯虚析构函数
    （五）文件操作
        C++中对文件操作需要包含头文件<fstream>
        1.写文件步骤：
            1.#include <fstream>
            2.ofstream ofs;
            3.ofs.open("文件路径", 打开方式);
            4.ofs << "写入的数据";
            5.ofs.close();
        2.读文件步骤：
            1.#include <fstream>
            2.ifstream ifs;
            3.ifs.open("文件路径", 打开方式);
            4.四种方式读取
            5.ifs.close();
三、C++提高编程
    （一）模板
        1.函数模板
            语法：
                template <typename T>
                函数声明或定义
            两种使用方法：
                1.自动类型推导
                2.显示制订类型mySwap<int>(a, b);
        2.类模板
            语法：
                template <typename T>
                类
    （二）STL初识
        1.基本概念：
            STL从广义上分为：容器、算法、迭代器
            容器和算法之间通过迭代器进行无缝连接
            STL几乎所有的代码都采用模板类和模板函数
        2.STL的六大组件
            容器、算法、迭代器、仿函数、适配器、空间配置器
        3.容器：STL容器就是将运用最广泛的一些数据结构实现出来，常用的数据结构有数组、链表、树、栈、队列、集合、映射表等
            容器分类：
                序列式容器：强调值的顺序，序列式容器中的每个元素均有固定的位置
                关联式容器：二叉树结构，各元素之间有严格的物理上的顺序关系
        4.算法：分为质变算法和非质变算法
        5.迭代器：容器和算法之间的粘合剂，每个容器都有自己专属的迭代器
            迭代器种类：输入如迭代器、输出迭代器、前向迭代器、双向迭代器、随机访问迭代器
    （三）STL-常用容器
        1.vector容器（后插数组）
            用法：
                #include <vector>
                vector<int> v;
                v.push_back(10);
                v.push_back(20);
                v.push_back(30);
                //第一种遍历
                vector<int>::iterator itBegin = v.begin();//起始迭代器，指向容器中的第一个元素
                vector<int>::iterator itEnd = v.end();//结束迭代器，指向容器中最后一个元素的下一个位置
                while(itBegin != itEnd) {
                    cout z<< *itBegin << endl;
                    itBegin++;
                }
                //第二种遍历
                for(vector<int>::iterator it = v.begin(); it != v.end(); it++) {
                    cout << *it << endl;
                }
                //第三种遍历
                #include <algorithm>//标准算法头文件
                void myPrint(int val) {
                    cout << val << endl;
                }
                for_each(v.begin(), v.end(), myPrint);
            vector的构造函数
                vector<T>v1;
                vector<T>v2(v1.begi(), v1.end());
                vector<T>v3(10, 100);
                vector<T>v4(v3);
            vector的赋值操作
                operator=();
                assign();
            vector的容量和大小
                empty();
                capacity();
                size();
                resize();//重新指定容器的长度
            vector的插入和删除
                push_back();
                pop_back();
                insert();//参数列表（v1.begin(), n, elem）
                erase();//参数列表（v1.begin()）
                clear();
            vector的数据存取
                operator[]();
                at();
                front();
                back();
            vector的互换容器
                swap();
            vector的预留空间
                reserve();
        2.string容器（字符串）
            string构造函数
            string赋值方式：
                operator=();
                assign();
                方式很多，operator=比较实用
            string字符串拼接:
                operator+=();
                append();
            string查找和替换
                find();
                rfind();
                replace(); 
            string字符串比较
                compare();
            string字符存取
                operator[]();
                at();
            string插入和删除
                insert();
                erase();
            string子串
                substr();
        3.deque容器（前插、后插数组）
            deque的构造函数
                deque<T> deqT;
                deque<T>(deqT.begin(), deqT.end());
                deque<int>(10, 100);
                deque<T>(deqT);
            deque的赋值
                operator=();
                assign();
            deque的大小
                empty();
                size();
                resize();
            deque的插入和删除   
                push_back();
                push_front();
                pop_back();
                pop_front();
                insert();
                erase();
                clear();
            deque的数据存取
                operator[]();
                at();
                front();
                back();
            deque的排序
                sort(d.begin(), d.end());
        4.stack容器（栈）
            stack的构造函数
                stack<T> stk;
                stack(stk);
            stack的赋值操作
                operator=();
            stack的数据存取
                push();
                pop();
                top();
            stack的大小操作
                empty();
                size();
        5.queue容器（队列）
            queue的构造函数
                queue<T> que;
                queue(que);
            queue的赋值操作
                operator=();
            queue的数据存取
                push();
                pop();
                front();
                back();
            queue的大小操作
                empty();
                size();
        6.list容器（双向循环链表）
            list的构造函数
                list<T> lst;
                list();
            list的赋值和交换
                operator=();
                assign();
                swap(); 
            list的大小操作
                size();
                empty();
                resize();
            list的插入和删除
                push_back();
                pop_back();
                push_front();
                pop_front();
                insert();
                clear();
                erase();
                remove(elem);//删除容器中与elem相等的元素
            list的数据存取
                front();
                back();
            list的反转和排序
                reverse();
                sort();
        7.set/multiset容器（集合，set容器不允许有重复的元素，multiset允许）
            set的构造函数
                set<T> st;
                set(st);
            set的赋值
                operator=();
            set的大小和交换
                size();
                empty();
                swap();
            set的插入和删除
                insert();
                clear();
                erase();
            set的查找和统计
                find();
                count();
            pair队组创建
                pair<type, type> p(value1,value2);
                pair<type, type> p = make_pair(value1, value2);
            set的排序
        8.map/multimap容器（key-value关联式容器）
            map的构造和赋值
                map<T1, T2> mp;
                map(mp);
                operator=(); 
            map的大小和交换
                size();
                empty();
                swap();
            map的插入和删除
                insert();
                clear();
                erase();
            map的查找和统计
                find();
                count();
            map的排序
    （四）STL-函数对象(仿函数)
        1.函数对象
            函数对象在使用是，可以想普通函数那样调用，可以有参数，可以有返回值
            函数对象超出普通函数的概念，函数对象可以有自己的状态
            函数对象可以作为参数传递
        2.谓词
            返回bool类型的仿函数称为谓词
            如果operator()接受一个参数，那么叫做一元谓词
            如果operator()接受两个参数，那么叫做二元谓词
        3.内建函数对象（#include <functional>）
            算术仿函数
                template <class T> T plus<T>;//加法仿函数
                template <class T> T minus<T>;//减法仿函数
                template <class T> T multiplies<T>;//乘法仿函数
                template <class T> T divides<T>;//除法仿函数
                template <class T> T modulus<T>;//取模仿函数
                template <class T> T negate<T>;//取反仿函数
            关系仿函数
                template <class T> bool equal_to<T>//等于
                template <class T> bool not_equal_to<T>//不等于
                template <class T> bool greater<T>//大于
                template <class T> bool greater_equal<T>//大于等于
                template <class T> bool less<T>//小于
                template <class T> bool less_equal<T>//小于等于
            逻辑仿函数
                template <class T> bool logical_and<T>//逻辑与
                template <class T> bool logical_or<T>//逻辑或
                template <class T> bool logical_not<T>//逻辑非
    （五）STL-常用算法
        算法主要的头文件：<algorithm>、<numeric>、<functional>
        遍历算法
            for_each(开始迭代器， 结束迭代器， 函数对象);//遍历容器
            transform(源容器开始迭代器，源容器结束迭代器， 目标开始迭代器， 函数对象);//搬运容器到另一个容器中
        查找算法
            find(开始迭代器，结束迭代器， 查找元素);//查找元素
            find_if(开始迭代器，结束迭代器， 谓词);//按条件查找元素
            adjacent_find(开始迭代器，结束迭代器);//查找相邻重复元素
            binary_search(开始迭代器，结束迭代器， 查找元素);//二分查找法，需在有序序列中使用
            count(开始迭代器，结束迭代器， 统计元素);//统计元素个数
            count_if(开始迭代器，结束迭代器， 谓词);//按条件统计元素个数
        排序算法
            sort(开始迭代器，结束迭代器， 谓词);//对容器内元素进行排序
            random_shuffle(开始迭代器，结束迭代器);//洗牌，指定范围内的元素随机调整次序
            merge(容器1开始迭代器，容器1结束迭代器， 容器2开始迭代器，容器2结束迭代器， 目标开始迭代器);//容器元素合并，并存储到另一容器中，需要两个有序序列
            reverse();//反转指定范围的元素
        拷贝和替换算法
            copy(源容器开始迭代器，源容器结束迭代器， 目标开始迭代器);//容器内指定范围的元素拷贝到另一容器中
            replace(开始迭代器，结束迭代器， 旧元素， 新元素);//将容器内指定范围的旧元素修改为新元素
            replace_if(开始迭代器，结束迭代器， 谓词， 新元素);//容器内指定范围满足条件的元素替换为新元素
            swap(容器1， 容器2);//互换两个容器的元素
        算术生成算法
            accumulate(开始迭代器，结束迭代器， 起始值);//计算容器元素累计总和
            fill(开始迭代器，结束迭代器， 填充的值);//向容器中添加元素
        集合算法
            set_intersection(源容器1开始迭代器，源容器1结束迭代器，源容器2开始迭代器，源容器2结束迭代器，目标开始迭代器);//求两个容器的交集，源容器必须是有序序列
            set_union(源容器1开始迭代器，源容器1结束迭代器，源容器2开始迭代器，源容器2结束迭代器，目标开始迭代器);//求两个容器的并集，源容器必须是有序序列
            set_difference(源容器1开始迭代器，源容器1结束迭代器，源容器2开始迭代器，源容器2结束迭代器，目标开始迭代器);//求两个容器的差集