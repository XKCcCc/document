------------------------
-----wechat program-----
------------------------

一、小程序简介
    （一）小程序与普通网页开发的区别
        1.运行环境不同：网页运行在浏览器环境中，小程序运行在微信环境中
        2.API不同：由于运行环境不同，所以小程序无法调用DOM和BOM的API。但小程序可以调用微信环境提供的各种API，如地图、扫码、支付等；
        3.开发模式不同：网页的开发模式：浏览器+代码编辑器；小程序的开发模式：1.申请小程序开发账号；2.安装小程序开发者工具；3.创建和配置小程序项目；
二、小程序的构成
    （一）项目结构
        pages用于存放所有小程序的页面
        utils用来存放工具性质的模块（例如：格式化时间的自定义模块）
        app.js小程序项目的入口文件
        app.json小程序项目的全局配置文件
        app.wxss小程序项目的全局样式文件
        project.config.json项目的配置文件
        sitemap.json用来配置小程序及其页面是否允许被微信索引
    （二）小程序页面的组成部分
        小程序官方建议把所有小程序的页面都存放在pages目录中，以单独的文件夹存在
        .js文件：页面的脚本文件，存放页面的数据、事件处理函数等
        .json文件：当前页面的配置文件，配置窗口的外观、表现等
        .wxml文件：页面的模板结构文件
        .wxss文件：当前页面的样式表文件
    （三）json配置文件
        app.json
            当前小程序的全局配置文件，包括小程序的所有页面路径、窗口表现、界面表现、底部tab等。
            pages：用来记录当前小程序所有页面的路径
            window：全局定义小程序所有页面的背景颜色、文字颜色等
            style：全局定义小程序组件所使用的样式版本
            sitemapLocation:用于指明sitemap.json的位置
        project.config.json
            项目配置文件，用来记录我们对想重新开发工具所做的个性化配置
            setting：保存了编译相关的配置
            projectname：保存的是项目的名称
            appid：保存的是小程序的账号id
        sitemap.json
            配置小程序页面是否允许被微信索引
            action：allow/disallow
        每个页面文件夹中的.json
            对本页面的窗口外观进行配置，页面中的配置项会覆盖app.json的window中相同的配置项
    （四）新建小程序页面
        app.json->pages中新增页面的存放路径，小程序开发者工具即可自动创建对应的页面文件
    （五）修改项目首页
        调整app.json->pages数组中页面路径的前后顺序，即可修改项目的首页 
    （六）WXML模板
        WXML是小程序框架设计的一套标签语言，用来构建小程序页面的结构
        WXML和HTML的区别
            1.标签名称不同
                HTML（div，span，img，a）
                WXML（view，text，image，navigator）
            2.属性节点不同
                <a href="#">超链接</a>
                <navigator url="/pages/home/home"></navigator>
            3.提供了类似于Vue中的模板语法
                数据绑定
                列表渲染
                条件渲染
    （七）WXSS样式
        WXSS是一套样式语言，用于描述WXML的组件样式，类似于网页开发中的CSS
        WXSS和CSS的区别
            1.新增了rpx尺寸单位
                CSS中需要手动进行像素单位换算，例如rem
                WXSS在底层支持新的尺寸单位rpx，在不同大小的屏幕上小程序会自动进行换算
            2.提供了全局的样式和局部样式
                项目根目录中的app.wxss会作用于所有小程序页面
                局部页面的.wxss样式仅对当前页面生效
            3.WXSS仅支持部分CSS选择器
                .class和#获取id
                element
                并集选择器、后代选择器
                ::after和::before等伪类选择器
    （八）js逻辑交互
        .js文件分为三大类
            app.js
                是整个小程序项目的入口文件，通过调用App()函数来启动整个小程序
            页面的.js文件
                是页面的入口文件，通过调用Page()函数来创建并运行
            普通的.js文件
                是普通的功能模块文件，用来封装公共的函数或属性供页面使用
三、小程序的宿主环境
    手机微信是小程序的宿主环境
    小程序宿主环境包含的内容
        （一）通信模型
            通信的主体
                小程序中通信的主题是渲染层和逻辑层
                WXML模板和WXSS样式工作在渲染层
                JS脚本工作在逻辑层 
            通信的模型
                渲染层和逻辑层之间的通信由微信客户端进行转发；
                逻辑层和第三方服务器之间的通信由微信客户端进行转发；
        （二）运行机制
            小程序启动的过程
                1.把小程序的代码包下载到本地
                2.解析app.json全局配置文件
                3.执行app.js小程序入口文件，调用App()创建小程序实例
                4.渲染小程序首页
                5.小程序启动完成
            页面渲染的过程
                1.加载解析页面的.json配置文件
                2.加载页面的.wxml模板和.wxss样式
                3.执行页面的.js文件，调用Page()创建页面实例
                4.页面渲染完成
        （三）组件
            组件的分类
                小程序中的组件也是由宿主环境提供的，官方把小程序的组件分为9大类
                    1.视图容器
                        view   
                            普通视图区域
                            类似于HTML中的div，是一个块级元素
                            常用来实现页面的布局效果
                        scroll-view
                            可滚动的视图区域
                            常用来实现页面的布局效果
                            属性：scroll-x、scroll-y
                            注意：container必须设置height限制
                        swiper和swiper-item
                            轮播图容器组件和轮播图item组件
                            属性：
                                indicator-dots:是否显示面板指示点
                                indicator-color:指示点颜色
                                indicator-active-color:当前选中的指示点颜色
                                autoplay:是否自动切换
                                interval:自动切换时间间隔
                                circular:是否采用衔接滑动
                    2.基础内容
                        text
                            文本组件
                            类似于HTML中的span标签，是一个行内元素
                            基本使用：selectable：实现长按选中文本内容的效果
                        rich-text
                            富文本文件
                            支持把HTML字符串渲染为WXML结构
                            基本使用：通过rich-text组件的nodes属性节点，把HTML字符串渲染为对应的UI结构
                    3.表单组件
                        button
                            按钮组件
                            功能比HTML中的button按钮丰富
                            通过open-type属性可以调用微信提供的各种功能（客服、转发、获取用户授权、获取用户信息等）
                            基本使用：
                                通过type指定按钮类型
                                通过size="mini"调整小尺寸按钮
                                plain镂空按钮
                    4.导航组件
                        navigator
                            页面导航组件
                            类似于HTML中的a链接
                    5.媒体组件
                        image
                            图片组件
                            image组件默认宽度约300px、高度约240px
                            基本使用：
                                空图片
                                使用src指向图片路径
                                mode属性：
                                    scaleToFill：缩放模式，不保持纵横比缩放图片
                                    aspectFit：保持纵横比缩放图片
                                    aspectFill：保持纵横比缩放图片，只保证图片的短边能完全显示出来
                                    widthFix：宽度不变，高度自动变化
                                    heightFix：高度不变，宽度自动变化
                    6.map地图组件
                    7.canvas画布组件
                    8.开发能力
                    9.无障碍访问
        （四）API
            小程序中的API是由宿主环境提供的
            小程序API的3大分类：
            事件监听API
                特点：以on开头，用来监听某些事件的触发
                举例：wx.onWindowResize(function callback)
            同步API
                特点：以Sync结尾的API都是同步API；同步API的执行结果，可以通过函数返回值直接获取，如果执行出错会抛出异常
                举例：wx.setStorageSync（'key','value'）向本地存储中写入内容
            异步API
                特点：类似于jQuery中的$.ajax(options)函数，需要通过success、fail、complete接收调用的结果
                举例：wx.request()发起网络数据请求，通过success回调函数接收数据
四、协同工作和发布
    1.小程序成员管理
    2.小程序的版本
    3.小程序发布上线
    4.小程序码推广
    5.小程序运营数据
五、WXML模板语法
    （一）数据绑定
        基本原则
            1.在data中定义数据
                在页面对应的.js文件中把数据定义到data对象中即可
            2.在WXML中使用数据
                把data中的数据绑定到页面中渲染，使用Mustache语法将变量包起来即可，例<view>{{数据名称}}</view>
        Mustache语法主要应用场景
            1.绑定内容
            2.绑定属性
            3.运算
    （二）事件绑定
        事件是渲染层到逻辑层的通讯方式，通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理
        小程序常用的事件
            类型      绑定方式                     事件描述
            tap    bindtap或bind:tap          手指触摸后马上离开，类似于HTML中的click事件
            input  bindinput或bind:input      文本框的输入事件
            change bindchange或bind:change    状态改变时触发
        事件对象的属性列表
            属性             类型       说明
            type            String     事件类型
            timeStramp      Integer    页面从打开到触发事件所经过的毫秒数
            target          Object     触发事件的组件的一些属性值集合
            currentTarget   Object     当前组件的一些属性值集合
            detail          Object     额外的信息
            touches         Array      触摸事件，当前停留在屏幕中的触摸点信息的数组
            changeTouches   Array      触摸事件，当前变化的触摸点信息的数组
        target和currentTarget的区别：target是触发该事件的源头组件，而currentTarget则是当前事件所绑定的组件
        在事件处理函数中为data中的数据赋值：通过调用this.setData（dataObject）方法，可以给页面data中的数据重新赋值
        事件传参
            小程序中的事件传参比较特殊，不能在绑定事件的同时为事件处理函数传递参数
            可以通过data-*自定义属性传参，其中*代表的是参数的名字，例：data-info="{{2}}"
            在事件处理函数中，通过event.target.dataset.参数名即可获取到具体参数的值
    （三）条件渲染
        wx:if
            wx:if="{{condition1}}"
            wx:elif="{{condition2}}"
            wx:else
        结合<block>使用wx:if
            如果要一次性控制多个组件的展示于隐藏，可以使用一个<block></block>标签将多个组件包装起来，并在<block>标签商使用wx:if控制属性 
            <block>并不是一个组件，它知识一个包裹性质的容器，不会在页面中做任何渲染
        hidden
            直接使用hidden="{{condition}}"也能控制元素的显示和隐藏
        wx:if和hidden的对比
            1.运行方式不同：
                wx:if以创建和移除元素的方式，控制元素的展示和隐藏
                hidden以切换样式的方式，控制元素的显示和隐藏
            2.使用建议
                频繁切换时，建议使用hidden
                控制条件复杂时，建议使用wx:if搭配wx:elif和wx:else
    （四）列表渲染
        wx:for
            通过wx:for可以根据指定的数组，循环渲染重复的组件结构,默认情况下当前循环项的索引用index表示，当前循环项用item表示
            例：wx:for="{{arr1}}"  索引是：{{index}},item是：{{item}}
        手动指定索引和当前项的变量名
            使用wx:for-index可以指定当前循环项的索引的变量名
            使用wx:for-item可以指定当前项的变量名
        wx:key的使用
            类似于VUe列表渲染中的:key，小程序在实现列表渲染时，也建议为渲染出来的列表项指定唯一的key值，从而提高渲染的效率
六、WXSS模板样式
    WXSS是一套样式语言，用于美化WXML的组件样式，类似于网页开发中的CSS
    WXSS和CSS的关系：WXSS具有CSS大部分特性，扩展特性有rpx尺寸单位和@import样式导入
    @import后跟需要导入的外联样式表的相对路径，用;表示语句结束，例：@import "common.wxss";
七、全局配置
    （一）全局配置文件app.json
        app.json的window节点常用的配置项
        属性名                          类型       默认值             说明
        navigationBarTitleText        String      字符串     导航栏标题文字内容
        navigationBarBackgroundColor  HexColor    #000000   导航栏背景颜色
        navigationBarTextStyle        String      white     导航栏标题颜色，仅支持white/black
        backgroundColor               HexColor    #ffffff   窗口背景颜色
        backgroundTextStyle           String      dark      下拉loading的样式，仅支持dark/light
        enablePullDownRefresh         Boolean     false     是否全局开启下拉刷新
        onReachBottomDistance         Number      50        页面上拉触底事件触发时距页面底部距离，单位为px
        全局开启下拉刷新功能app.json->window->"enablePullDownRefresh":true
        设置下拉刷新时背景的颜色:app.json->wimdow->"backgroundColor":"#efefef"
        设置下拉刷新时的loading样式:app.json->window->"backgroundTextStyle":"dark"
        设置上拉触底距离：app.json->window->"onReachBottomDistance":50
    （二）tabBar
        tabBar用于实现多页面的快速切换，分为底部tabBar和顶部tabBar
        tabBar只能最少2个最多5个；当渲染顶部tabBar时，不显示icon只显示文本
        1.tabBar的6个组成部分
            backgroundColor：tabBar的背景颜色
            borderStyle：tabBar上边框颜色
            color：tabBar上文字默认的颜色 
            selectedColor：tab上的文字选中时的颜色
            iconPath：未选中时的图片路径
            selectedIconPath：选中时的图片路径
        2.tabBar节点的配置项
            属性             类型     必填  默认值     描述
            position         String   否   bottom     tabBar的位置，仅支持bottom/top
            borderStyle      String   否   black      tabBar上边框的颜色，仅支持black/white
            color            HexColor 否              tabBar上文字的默认颜色
            selectedColor    HexColor 否              tabBar上文字选中的颜色
            backgroundColor  HexColor 否              tabBar的背景颜色
            list             Array    是            tab页签的列表，最少2个最多5个
        3.每个tab项的配置选项
            属性               类型     必填     描述
            pagePath          String   是       页面路径，页面必须在pages中预先定义
            text              String   是       tab上显示的文字
            iconPath          String   否       未选中时的图片路径；当position为top时不显示icon
            selectedIconPath  String   否       选中时的图片路径；当position为top时不显示icon
八、页面配置
九、网络数据请求
    1.小程序中网络数据请求的限制
        1.只能请求https类型的接口
        2.必须将接口的域名添加到信任列表中
    2.配置request合法域名
    3.发起GET/POST请求
        调用微信小程序提供的wx:request()方法，可以发起GET/POST数据请求
        例：
        wx.request({
            url:"https://www.escook.cn/api/get",
            method:"GET/POST",
            data:{
                name:"Vic",
                age:21
            },
            success:(res)=>{
                console.log(res)
            }
        })
    4.在页面刚加载时请求数据，此时需要在页面的onLoad事件中调用获取数据的函数
    5.跳过request合法域名校验：在微信开发者工具中设置
    6.关于跨域和Ajax的说明
        跨域问题只存在于基于浏览器Web开发中，而小程序的宿主环境是微信客户端，所以不存在跨域的问题；
        Ajax技术核心是XMLHttpRequest对象，所以小程序中不能叫做发起Ajax请求，而叫做发起网络数据请求；
十、案例-本地生活
十一、页面导航
    （一）页面导航的两种方式
        1.声明式导航
            在页面上声明一个<navigator>导航组件
            通过点击<navigator>组件实现页面跳转
        2.编程式导航
            调用小程序的导航API，实现页面的跳转
    （二）导航到tabBar页面：
        1.声明式导航：使用<navigator>组件，指定url和open-type
            url表示要跳转的页面的地址，必须以/开头
            open-type表示跳转的方式，必须为switchTab
        2.编程式导航：调用wx.switchTab(Object object)方法，其中Object参数对象的属性列表如下：
            属性      类型     是否必选     说明
            url      string   是          需要跳转的tabBar页面的路径，路径后不能带参数
            success  function 否          接口调用成功的回调函数
            fail     function 否          接口调用失败的回调函数
            complete function 否          接口调用结束的回调函数（调用成功、失败都会执行）
    （三）导航到非tabBar页面：
        1.声明式导航：使用<navigator>组件，指定url和open-type
            url表示要跳转的页面的地址，必须以/开头
            open-type表示跳转的方式，必须为navigate，可省略
        2.编程式导航：调用wx.navigateTo(Object object)方法，其中Object参数对象的属性列表如下：
            属性      类型     是否必选     说明
            url      string   是          需要跳转到非tabBar页面的路径，路径可以带参数
            success  function 否          接口调用成功的回调函数
            fail     function 否          接口调用失败的回调函数
            complete function 否          接口调用结束的回调函数（调用成功、失败都会执行）
    （四）后退导航：
        1.声明式导航：需要指定open-type属性和delta属性
            open-type的值必须是navigateBack，表示要进行后退导航
            delta的值必须是数字，表示要后退的层级，默认值1，可省略
        2.编程式导航：调用wx.navigateBack(Object object)方法，其中Object参数对象可选的属性列表如下：
            属性        类型     是否可选     说明
            delta      number   否           返回的页面数，如果delta大于现有页面数，则返回到首页
            success    function 否           接口调用成功的回调函数
            fail       function 否           接口调用失败的回调函数
            complete   function 否           接口调用结束的回调函数（调用成功、失败都会执行）
    导航传参
        声明式导航：navigator组件的url属性用来指定将要跳转的页面的路径。同时，路径的后面还可以携带参数：
            参数于路径之间用？分隔
            参数键与参数值用=相连
            不同参数用&分隔
        编程式导航：调用wx.navigateTo(Object object)方法，也可以携带参数，规则与声明式导航相同
    在onLoad中接收导航参数
        通过声明式导航传参或编程式导航传参所携带的参数，可以直接在onLoad事件中直接获取到
            options就是导航传递过来的参数对象
            onLoad:function(options) {
                console.log(options)
            }
十二、页面事件
    （一）下拉刷新事件
        监听页面的下拉刷新事件：在页面的.js文件中，通过onPullDownRefresh()函数即可监听当前页面的下拉刷新事件
        停止下拉刷新的效果：调用wx.stopPullDownRefresh()可以停止当前页面的下拉刷新
    （二）上拉触底事件
        监听页面的上拉触底事件：在页面的.js文件中，通过onReachBottom()函数即可监听当前页面的上拉触底事件
        配置上拉触底距离：在全局或页面的.json配置文件中，通过onReachBottomDistance属性来配置上拉触底的距离
        上拉触底展示loading效果：wx.showLoading()
        上拉触底隐藏loading效果：wx.hideLoading()
        对上拉触底进行节流处理：
            1.在data中定义isloading节流阀
            2.在getColors()方法中修改isloading节流阀的值
            3.在onReachBottom中判断节流阀的值，从而对数据请求进行节流控制
十三、生命周期
    （一）小程序生命周期分类
        1.应用生命周期：特指小程序从启动->运行->销毁的过程
        2.页面生命周期：特指小程序中，每个页面的加载->渲染->销毁的过程
    （二）应用的生命周期函数
        小程序的应用生命周期函数需要在app.js中进行声明
        APP({
            小程序初始化完成时，执行此函数，全局只触发一次，可以做一些初始化工作
            onLaunch:function(options){},
            小程序启动，或从后台进入前台显示时触发
            onSHow:function(options){},
            小程序从前台进入后台时触发
            onHide:function()
        })
    （三）页面的生命周期函数
        小程序的页面生命周期函数需要在页面的.js文件中进行声明
        Page({
            onLoad:function(options){},//监听页面加载，一个页面只调用一次
            onShow:function(){},//监听页面显示
            onReady:function(){},//监听页面初次渲染完成，一个页面只调用一次
            onHide:function(){},//监听页面隐藏
            onUnload:function(){}//监听页面卸载，一个页面只调用一次
        })    
十四、WXS脚本
    WXS是小程序独有的一套脚本语言，结合WXML，可以构建出页面的结构。WXS典型的应用场景是"过滤器"
    （一）WXS和JavaScript的区别
        1.WXS有自己的数据类型
            number、string、boolean、object、function、array、date、regexp正则
        2.WXS不支持类似于ES6及以上的语法形式
            不支持：let、const、解构赋值、展开运算符、箭头函数、对象属性简写、etc...
            支持：var定义变量、普通function函数等类似于ES5的语法
        3.WXS遵循CommonJS规范
            module对象
            require()函数
            module.exports对象
    （二）基本语法
        1.内嵌wxs脚本
            wxs代码可以编写在<wxs>内，<wxs>必须提供module属性，用来指定当前wxs的模块名称
        2.外联wxs脚本
            以.wxs为后缀名的文件，可编写于utils文件中
            2.1编写函数：
                function toLower（str）
                {
                    return str.toLowerCase()
                } 
            2.2模块对象引出函数：
                module.exports = {
                    toLower: toLower
                }
            2.3使用函数：
                在wxml中引入外联的wxs脚本是，必须为<wxs>标签添加module和src属性
                    module用来指定模块的名称
                    src用来指定要引入的脚本的路径，且必须是相对路径
                    <wxs sec="../../utils/tools.wxs" module="m2"></wxs>
十五、案例-本地生活
十六、自定义组件
    （一）组件的创建与引用
        创建组件
            1.在项目的根目录中创建components->test文件夹
            2.在新建的components->test文件夹上新建Components
            3.键入组件的名称后回车，会自动生成组件对应的4个文件，后缀名分别为.js、.json、.wxml和.wxss
        引用组件
            局部引用：组件只能在当前被引用的页面内使用
                在页面的.json文件中引入组件
                {
                    "usingComponents":{
                        "my-test1":"/components/test1/test1"
                    }
                }
            全局引用：组件可以在每个小程序页面中使用
                在app.json全局配置文件中引用组件的方式，叫做全局引用
        组件于页面的区别
            组件的.json文件中需要声明"component":true属性
            组件的.js文件中调用的是Component()函数
            组件的事件处理函数需要定义到methods节点中
    （二）组件的样式
        组件样式隔离
            app.wxss中的全局样式对组件无效
            只有class选择器会有样式隔离效果，id选择器、属性选择器、标签选择器不受样式隔离的影响
            可通过styleIsolation修改组件的样式隔离选项
            在组件的.js文件中新增如下配置
                Component({
                   options:{
                       styleIsolation:"isolated"
                   }
                })
            或者组件的.json文件中新增如下配置
                {
                    "stypeIsolation":"isolated"
                }
            styleIsolation可选值
                可选值         默认值  描述
                isolated      是      启用样式隔离，class'指定的样式将不会相互影响
                apply-shared  否      页面wxss样式将影响自定义组件
                shared        否      页面wxss样式影响自定义组件，自定义组件的wxss也会影响页面和其他设置apply-shared或shared的自定义组件
    （三）组件的数据、方法和属性
        用于组件模板渲染的私有数据需要定义到data节点中
        事件处理函数和自定义方法需要定义到methods节点中
        properties是组件的对外属性，用来接收外界传递到组件中的数据
            data更倾向于存储组件的私有数据
            properties更倾向于存储外界传递到组件中的数据
    （四）数据监听器
        数据监听器用于监听和响应任何属性和数据字段的变化，从而执行特定的操作
        Component（{
            observers:{
                "字段1, 字段2": function(字段A的新值, 字段B的新值){}
            }
        }
        为了方便可以使用**通配符来监听对象中的所有属性的变化
    （五）纯文本字段
        纯文本字段指的是那些不用于界面渲染的data字段
        应用场景：例如有些情况下，某些data中的字段既不会展示在页面上，也不会传递给其他组件，仅仅在当前组件内部使用。带有这种特性的data字段适合被设置为纯数据字段
        好处：纯数据字段有助于提升页面更新的性能
        使用规则：在Component构造器的options节点中，指定pureDataPattern为一个正则表达式，字段符合这个正则表达式的字段将称为纯数据字段
    （六）组件全部的生命周期函数
        生命周期函数     参数     描述说明
        created         无       在组件实例刚刚被创建时执行
        attached        无       在组件实例进入页面节点树时执行
        ready           无       在组件在视图层布局完成后执行
        moved           无       在组件实例被移动到节点树另一个位置时执行
        detached        无       在组件实例被从页面节点数移除时执行
        error           Object   每当组件方法抛出错误时执行
        created：组件实例刚被创建好的时候，created生命周期函数会被触发
            此时还不能调用setData
            通常在这个生命周期函数中，只应该用于给组件的this添加一些自定义的属性字段
        attached：在组件完全初始化完毕、进入页面节点树后，attached生命周期函数会被触发
            此时this.data已被初始化完毕
            这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行
        detached：在组件离开页面节点树后，detached生命周期函数会被触发
            退出一个页面时，会触发页面内每个自定义组件的detached生命周期函数
            此时适合做一些清理性质的工作
        lifetimes节点：生命周期函数可以声明在lifetimes字段内
            Components（{
                lifetimes:{
                    attached(){},
                    detached(){}
                }
            }
    （七）组件所在页面的生命周期
        有时自定义组件的行为依赖于页面状态的变化，此时就需要用到组件所在页面的生命周期
        生命周期函数     参数     描述
        show            无       组件所在页面被展示时执行
        hide            无       组件所在页面被隐藏时执行
        resize          Object   组件所在页面尺寸发生变化时执行
        pageLifetime节点
            组件所在页面的生命周期函数需要定义在pageLifetime节点中
            Component（{
                pageLifetime:{
                    show:function(){},
                    hide:function(){},
                    resize:function(){}
                }
            }）
    （八）插槽
        在自定义组件的wxml结构中可以提供一个<slot>节点，用于承载组件使用者提供的wxml结构
        1.启用多个插槽：
            Component({
                options:{
                    multipleSlots:true
                }
            })
        2.定义多个插槽可以用不同的name来区分不同的插槽
            <slot name="before"></slot>
            <slot name="after"></slot>
    （九）父子组件之间的通信
        1.属性绑定
            用于父组件向子组件的指定属性设置数据，仅能设置json兼容的数据
                父组件的data节点
                data:{
                    count:0
                }
                父组件的wxml结构
                <my-c1 count="{{count}}"></my-c1>
                <view>父组件中的count值为：{{count}}</view>
        2.事件绑定
            用于子组件向父组件传递数据，可以传递任意数据
                1.在父组件的js中定义一个函数，这个函数即将通过自定义事件的形式传递给子组件
                2.在父组件的wxml中，通过自定义事件的形式，将步骤1中定义的函数引用传递给子组件
                3.在子组件的js中，通过调用this.triggerEvent("自定义事件的名称"， {/*参数对象*/})，将数据发送到父组件
                4.在父组件的js中，通过e.detail获取到子组件传递过来的数据
        3.获取组件实例
            父组件还可以通过this.selectComponent()获取子组件实例对象
            这样就可以直接访问子组件的任意数据和方法
            调用时需要传入一个选择器，例如this.selectComponent(".my-component")
    （十）behaviors
        用于实现组件间代码共享的特性
        每个behavior可以包含一组属性、数据、生命周期函数和方法，组件引用它时，它的属性、数据和方法会被合并到组件中
        1.创建behavior
            调用Behavior(Object object)方法即可创建一个共享behavior实例对象，供所有的组件使用
            module.exports = Behavior({})
        2.导入并使用behavior
            使用require()方法导入需要的behavior，挂载后即可访问behavior中的数据或方法
            const myBehavior = require("../../behavior/my-behavior")
            Component({
                behaviors:[myBehavior],
            })
十七、使用npm包
    (一)nmp包
        小程序对npm包的限制
            1.不支持依赖于Node.js内置库的包
            2.不支持依赖于浏览器内置对象的包
            3.不支持依赖于C++插件的包
    （二）Vant Weapp
        1.安装Vant组件库
            通过npm安装，版本@1.3.3
                nmp init -y
                npm i @vant/weapp@1.3.3 -S --production
            构建npm包
            修改app.json
        2.使用Vant组件
            app.json的usingConponents节点引入需要的组件
                "usingCOmponents":{
                    "van-button":"@vant/weapp/button/index"
                }
            <van-button type="primary">按钮</van-button>
        3.定制全局主题样式
            在app.wxss中写入CSS变量
            page{
                --button-danger-background-color:#C00000;
                --button-danger-border-color:#C00000;
            }
    （三）API Promise化
        基于回调函数的异步API的缺点：容易造成回调地狱问题，代码的可读性、维护性差
        API Promise化指的是通过额外的配置，将官方提供的、基于回调函数的异步API，升级改造为基于Promise的异步API
        实现API Promise化  
            1.实现API Promise化依赖于第三方apm包miniprogram-api-promise
            2.安装：npm install --save miniprogram-api-promise@1.0.4
            3.使用：在小程序入口文件app.js中调用promisefyAll()，即可实现异步API的Promise化
                import {promisifyAll} from "miniprogram-api-promise"
                const wxp = wx.p = {}
                promisifyAll(wx, wxp)
            4.调用Promise化后的异步API
                页面的.wxml
                <van-button type="danger" bindtap="getInfo">按钮</van-button>
                页面的.js
                async getInfo() {
                    const {data : res} = await wx.p.request({
                        method: "GET",
                        url: "https://www/escook/api/get",
                        data:{name:"Vic", age: 21}
                    })
                console.log(res)
                }
十八、全局数据共享
    全局数据共享是为了解决组件之间数据共享的问题
    1.小程序中的全局数据共享方案
        mobx-miniprogram用来创建Store实例对象
        mobx-miniprogram-bindings用来把Store中的共享数据或方法绑定到组件或页面中使用
    2.安装Mobx相关的包：npm install --save mobx-miniprogram@4.13.2 mobx-miniprogram-bindings@1.2.1
    3.创建Mobx的store实例
        import {observable, action} from "mobx-miniprogram"
        export const store = observable({
            num1: 1,
            num2: 1,
            get sum() {
                return this.num1 + this.num2
            },
            updateNum1: action(function(step) {
                this.num1 += step
            }),
            updateNum2: action(function(step) {
                this.num2 += step
            })
        })
    4.将Store中的成员绑定到页面中
        import {createStoreBindings} from "mobx-miniprogam-bindings"
        import {store} from "../../store/store"
        Page({
            onLoad:function() {
                this.storeBindings = createStoreBindings(this, {
                    store,
                    fields: ["num1", "num2", "sum"],
                    actions: ["updateNum1"]
                })
            },
            onUnload:function() {
                this.storeBindings.destroyStoreBindings()
            }
        })
   5.将Store中的成员绑定到组件中
        import {storeBindingsBehavior} from "mobx-miniprogram-bindings"
        import {store} from "../../store/store"
        Component({
            behaviors:[storeBindingsBehavior],
            storeBindings: {
                store,
                fields:{
                    num1:"num1",
                    num2:"num2",
                    sum:"sum"
                },
                actions:{
                    updateNum2:"updateNum2"
                }
            }
        })
十九、分包
    1.分包的好处
        可以优化小程序首次启动的下载时间
        在多团队共同开发时可以更好的解耦协作
    2.分包后项目的构成：分包后小程序项目由1个主包+多个分包组成
        主包：一般只包含项目的启动页面或TabBar页面，以及所有分包都需要用到的一些公共资源
        分包：只包含和当前分包有关的页面和私有资源
    3.分包的加载规则
        小程序启动时默认会加载主包并启动主包内页面
            tabBar页面需要放到主包中
        当用户进入分包内某个页面时，客户端会把对应分包下载下来，下载完成后再进行展示
            非tabBar页面可以按照功能的不同，划分为不同的分包之后，进行按需下载
    4.使用分包
        配置方法
            小程序目录结构：
                pages //主包的所有页面
                packageA //分包A
                packageB //分包B
            在app.json的subpackages节点中声明分包的结构
                "subpackages": [
                    {
                        "root": "packageA",
                        "pages": [
                            "pages/cat/cat",
                            "pages/dog/dog"
                        ]
                    },
                    {
                        "root": "packageB",
                        "name": "pack2", //别名
                        "pages": [
                            "pages/apple/apple",
                            "pages/banana/banana"
                        ]
                    }
                ]
    2.打包原则
        小程序会按subpackages的配置进行分包，subpackages之外的目录将被打包到主包中
        主包也可以有自己的pages
        tabBar页面必须在主包内
        分包之间不能相互嵌套
    6.独立分包
        配置方法：在普通分包的基础上添加"independent": true
    7.分包预下载
        在app.json中，使用preloadRule节点定义分包的预下载规则
            "preloadRule": {
                "pages/contact/contact": {
                    "network": "all",
                    "packages": ["packageA"]
                }
            }
二十、案例-自定义tabBar
二十一、黑马优购项目
